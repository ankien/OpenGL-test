#version 410

out vec4 fragColor;
in vec3 triColor;
in vec2 outTexCoord;
in vec3 outNormal;
in vec3 fragPos;

uniform sampler2D ourTexture;
uniform sampler2D ourTexture2;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

void main() {
    // ambient
    float ambientLightStrength = 0.2;
    vec3 ambient = ambientLightStrength * lightColor;

    // diffuse
    vec3 normNorm = normalize(outNormal); // due to the way this formula works, fragments facing the light need a reversed(positive) normal.z
    vec3 lightDir = normalize(lightPos - fragPos);
    float diff = max(dot(normNorm,lightDir),0.0);
    vec3 diffuse = diff * lightColor;

    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, normNorm);
    float spec = pow(max(dot(viewDir,reflectDir),0.0),256); // 256 = shininess value
    vec3 specular = specularStrength * spec * lightColor;
    
    vec3 result = (ambient + diffuse + specular) * vec3(mix(texture(ourTexture,outTexCoord) * vec4(triColor, 1.0), texture(ourTexture2,outTexCoord), 0.4));
    fragColor = vec4(result,1.0);
}